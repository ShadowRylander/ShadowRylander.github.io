#+title: AlBasmala ^_^
# +DATE: 2018-06-01
#+date: <1991-08-20 19:29>
#+filetags: emacs
#+fileimage: org_logo.png 150 150
#+options: d:nil
#+PROPERTY: header-args  :exports code
#+OPTIONS: toc:nil html-postamble:nil d:nil
#+PROPERTY: header-args :tangle "~/blog/AlBasmala.el"

# C-c C-v C-b ‚áí Evaluate all src blocks

# It seems that one should publish a single file before
# attempting to publish the project.
# (maybe-clone "https://github.com/alhassy/alhassy.github.io.git" "~/blog")

# (cl-defun not-currently-working-with (&optional z) t)
# (cl-defun currently-working-with (&optional y) )

# (org-static-blog-assemble-index)

* Abstract                                                           :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Abstract
  :END:

#+TOC: headlines 2

How my blog is setup (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

*Messy --not yet documented, nor cleaned up!*

# This, like the upcoming articles, is intended to be a living document.
# The date serves to be date of the first release and the repo contains
# the history of any alterations.


# Briefly,

# + This article is a literate [[https://orgmode.org/][Org]] file that when loaded executes ~(org-babel-tangle)~ to produce
#   an elisp file which is then loaded locally.

# + The resulting elisp file is then used to actually produce this webpage.

# The remainder of this article discusses the elisp utilities that made the second point possible.

* COMMENT [[https://github.com/bastibe/org-static-blog][org-static-block]]
  :PROPERTIES:
  :CUSTOM_ID: https-github-com-bastibe-org-static-blog-org-static-block
  :END:

  #+begin_src emacs-lisp :exports code
(setq org-static-blog-publish-title "Life & Computing Science")
(setq org-static-blog-publish-url "https://alhassy.github.io/")
(setq org-static-blog-publish-directory "~/blog/")
(setq org-static-blog-posts-directory "~/blog/posts/")
(setq org-static-blog-drafts-directory "~/blog/drafts/")
(setq org-static-blog-enable-tags t)
(setq org-export-with-toc nil)
(setq org-export-with-section-numbers nil)
#+end_src

#+RESULTS:

* Floating TOC
  :PROPERTIES:
  :CUSTOM_ID: Floating-TOC
  :END:
When we write =#+toc: headlines 2= in our Org,
HTML export produces the following.
#+begin_src html :exports code :tangle no
<div id="table-of-contents">
  <h2>Table of Contents</h2>
  <div id="text-table-of-contents">
    <ul>
      <li> section 1 </li>
             ‚ãÆ
      <li> section ùìÉ </li>
    </ul>
  </div>
</div>
#+end_src
Hence, we can style the table of contents by writing rules that target those
=id='s. We use the following rules, taken from [[https://orgmode.org/worg/][the Worg community]].
#+begin_src css :tangle ~/blog/floating-toc.css
/*TOC inspired by https://orgmode.org/worg/ */
#table-of-contents {
    position: fixed; right: 0em; top: 0em;
    margin-top: 120px; /* offset from the top of the screen */

    /* It shrinks and grows as necessary */
    padding: 0em !important;
    width: auto !important;
    min-width: auto !important;

    font-size: 10pt;
    background: white;
    line-height: 12pt;
    text-align: right;

    box-shadow: 0 0 1em #777777;
    -webkit-box-shadow: 0 0 1em #777777;
    -moz-box-shadow: 0 0 1em #777777;
    -webkit-border-bottom-left-radius: 5px;
    -moz-border-radius-bottomleft: 5px;

    /* Ensure doesn't flow off the screen when expanded */
    max-height: 80%;
    overflow: auto;}

#table-of-contents h2 {
    font-size: 13pt;
    max-width: 9em;
    border: 0;
    font-weight: normal;
    padding-left: 0.5em;
    padding-right: 0.5em;
    padding-top: 0.05em;
    padding-bottom: 0.05em; }

    #table-of-contents #text-table-of-contents {
    display: none;
    text-align: left; }

    #table-of-contents:hover #text-table-of-contents {
    display: block;
    padding: 0.5em;
    margin-top: -1.5em; }
#+end_src

Let's also avoid =Table of Contents= in preference to the Greek [[https://en.wikipedia.org/wiki/Xi_(letter)][letter]] =Œû=.
#+begin_src emacs-lisp
(advice-add 'org-html--translate :before-until 'display-toc-as-Œû)

(defun display-toc-as-Œû (phrase info) (when (equal phrase "Table of Contents") "Œû"))
#+end_src

How did I get here?
1. How does Org's HTML export TOCs? ‚áí doc:org-html-toc
2. Looking at its source, we see doc:org-html--translate being
   the only place mentioning the string /Table of Contents/.
3. Let's advise it, with doc:advice-add, to return /Œû/
   /only/ on that particular input string.
4. Joy ‚ô•‚Äø‚ô•

#   I've altered it by adding the following rule for anchors a {‚ãØ};
#   which resurrects \ref{} calls via MathJax ---which org-notes-style killed.
#
# /* To allow \ref{} via MathJax */
# a { white-space: pre !important; }
I've added the rule =a { white-space: pre !important; }= to
~org-notes-style~ to have =\ref{}= calls to work.

# I've also added:
# /* Org-notes adds extra whitespace after the title, let's avoid that. */
# .title { margin: 0 0 0 0 !important; }

\[ p ‚äì q = p \quad ‚â° \quad p ‚äî q = q \label{Golden-Rule}\tag{Golden-Rule}\]

Look at \ref{Golden-Rule}, it says, when specialised to numbers, /the minimum
of two items is the first precisely when the maximum of the two is the second/
---d'uh!

#+begin_edcomm
:ed: Warning

We can make an equation ‚Ñ∞ named ùí© and refer to it by ‚Ñí by declaring
=\[‚Ñ∞ \tag{ùí©} \label{‚Ñí} \]= then refer to it with =\ref{‚Ñí}=.  However, if ùí© contains
Unicode, then the reference will not generally be ‚Äòclickable‚Äô ---it wont take
you to the equation's declaration site.  For example, \ref{‚äë-Definition} below
has Unicode in both its tag and label, and so clicking that link wont go
anywhere, whereas \ref{Order-Definition} has Unicode only in its tag, with the
label being =\label{Order-Definition}=, and clicking it takes you to the formula.

\[ p ‚äë q \quad ‚â° \quad p ‚äì q = p \tag{‚äë-Definition}\label{‚äë-Definition} \]
\[ p ‚äë q \quad ‚â° \quad p ‚äî q = q \tag{‚äë-Definition}\label{Order-Definition} \]

#+end_edcomm

* HTML Header
  :PROPERTIES:
  :CUSTOM_ID: HTML-Header
  :END:
#+begin_src emacs-lisp  :exports code
;; This header is inserted into the <head> section of every page:
(setq org-static-blog-page-header
(concat org-html-head-extra
"<meta name=\"author\" content=\"Musa Al-hassy\">
<meta name=\"referrer\" content=\"no-referrer\">
<link href=\"usual-org-front-matter.css\" rel=\"stylesheet\" type=\"text/css\" />
<link href=\"org-notes-style.css\" rel=\"stylesheet\" type=\"text/css\" />
<link href=\"floating-toc.css\" rel=\"stylesheet\" type=\"text/css\" />
<link href=\"blog-banner.css\" rel=\"stylesheet\" type=\"text/css\" />
<link rel=\"icon\" href=\"images/favicon.png\">

<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
,*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type=\"text/x-mathjax-config\">
    MathJax.Hub.Config({
        displayAlign: \"center\",
        displayIndent: \"0em\",

        \"HTML-CSS\": { scale: 100,
                        linebreaks: { automatic: \"false\" },
                        webFont: \"TeX\"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: \"false\" },
              font: \"TeX\"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: \"AMS\"},
               MultLineWidth: \"85%\",
               TagSide: \"right\",
               TagIndent: \".8em\"
             }
});
</script>
<script type=\"text/javascript\"
        src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML\"></script>

"))
#+end_src

‚áí file:../org-notes-style.css ‚áê

* Content Header
  :PROPERTIES:
  :CUSTOM_ID: Content-Header
  :END:

#+begin_src css :tangle ~/blog/blog-banner.css
.header {
  /* Try to load ‚Äòfantasy‚Äô if possible, else try to load the others. */
  font-family: fantasy, monospace, Times;
  text-align: center;
  overflow: hidden;
  /* background-color: #f1f1f1 !important; */
  /* background: #4183c4 !important; */
  padding-top: 10px;
  padding-bottom: 10px;
  box-shadow: 0 2px 10px 2px rgba(0, 0, 0, 0.2);
}

.header a.logo {
  font-size: 50px;
  font-weight: bold;
}

.header a {
  color: black;
  padding: 12px;
  text-decoration: none;
  font-size: 18px;
}

.header a:hover {
  background-color: #ddd;
  background-color: #fff;
  color: #4183c4;
}
#+end_src

#+begin_src emacs-lisp
;; This preamble is inserted at the beginning of the <body> of every page:
;;   This particular HTML creates a <div> with a simple linked headline
(setq org-static-blog-page-preamble
"<div class=\"header\">
  <a href=\"https://alhassy.github.io/\" class=\"logo\">Life & Computing Science</a>
  <br>
    <a href=\"https://alhassy.github.io/AlBasmala\">AlBasmala</a>
    <a href=\"https://alhassy.github.io/archive\">Archive</a>
    <a href=\"https://alhassy.github.io/tags\">Tags</a>
    <a href=\"https://alhassy.github.io/rss.xml\">RSS</a>
    <a href=\"https://alhassy.github.io/about\">About</a>
</div>"
)
#+end_src

Note that we could have been needlessly more generic by using, say,
=(org-static-blog-get-absolute-url org-static-blog-rss-file)=,
instead of hardcoding the links.
:Also:
org-static-blog-publish-url
org-static-blog-publish-title
:End:

* HTML Footer
  :PROPERTIES:
  :CUSTOM_ID: HTML-Footer
  :END:
#+begin_src emacs-lisp
;; This postamble is inserted at the end of the <body> of every page:
;;   This particular HTML creates a <div> with a link to the archive page
;;   and a licensing stub.
(setq org-static-blog-page-postamble
"<div id=\"archive\">
  <a href=\"https://alhassy.github.io/archive.html\">Other posts</a>
</div>
<center><a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/3.0/88x31.png\" /></a><br /><span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">Life and Computing Science</span> by <a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://alhassy.github.io/\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Musa Al-hassy</a> is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</center>

<div id=\"archive\"><a href=\"archive.html\">Other posts</a></div>
              <div id=\"disqus_thread\"></div>
              <script type=\"text/javascript\">
              /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
              var disqus_shortname = 'life-and-computing-science';
              /* * * DON'T EDIT BELOW THIS LINE * * */
              (function() {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                  })();
              </script>
              <noscript>Please enable JavaScript to view the
                  <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>
              <a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>")

(when nil
         :html-head-extra
         "<link rel=\"alternate\" type=\"application/rss+xml\"
                href=\"https://alhassy.github.io//public_html/my-blog.xml\"
                title=\"RSS feed for my learning.org\">
<a href=\"archive.html\">Other posts</a>

")
#+end_src

* Images
  :PROPERTIES:
  :CUSTOM_ID: Images
  :END:
#+begin_src emacs-lisp
;; every article declaratively has an associated image ^_^
;; If none declared, we use emacs-birthday-present.png :-)
(cl-defun my/org-static-blog-assemble-image (file)
(with-temp-buffer
  (insert-file-contents file)
  (goto-char 0)
  (search-forward-regexp "^\\#\\+fileimage: \\(.*\\)" nil t)
  (-let [(image width height)
         (s-split " " (substring-no-properties
                       (or (match-string 1)
                           "emacs-birthday-present.png")))]
    (setq width (or width 350))
    (setq height (or height 350))
  (format "<center> <img src=\"images/%s\" alt=\"Article image\"
  width=\"%s\" height=\"%s\" align=\"top\" /> </center>"
          image width height))))
#+end_src

#+RESULTS:
: my/org-static-blog-assemble-image

* this [[http://taopeng.me/org-notes-style/][org-notes-style]]
  :PROPERTIES:
  :CUSTOM_ID: http-taopeng-me-org-notes-style-org-notes-style
  :END:
#+begin_src emacs-lisp
;; MA: For org-notes-style, I need ‚Äútitle‚Äù and not ‚Äúpost-title‚Äù;
;; but need ‚Äúpost-title‚Äù for ‚Äúorg-static-blog‚Äù; so using an auxilary div.
(defun org-static-blog-post-preamble (post-filename)
  "Returns the formatted date and headline of the post.
This function is called for every post and prepended to the post body.
Modify this function if you want to change a posts headline."
  (concat
   ;; The title ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   "<h1 class=\"post-title\">"
   "<div class=\"title\" style=\"margin: 0 0 0 0 !important;\">"  ;; See remark above.
   "<a href=\"" (org-static-blog-get-post-url post-filename) "\">" (org-static-blog-get-title post-filename) "</a>"
   "</h1></div>"

   ;; Move to the footer? Near the ‚ÄòTags‚Äô of the article?
   ;; The date ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   "<div style=\"text-align: center;\">"
   (format-time-string (org-static-blog-gettext 'date-format)
                       (org-static-blog-get-date post-filename))
   "</div>"

   ;; The image ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   (my/org-static-blog-assemble-image post-filename)
   "<br><center><strong>Abstract</strong></center>"

   ))
#+end_src

+ /* Org-notes adds extra whitespace after the title, let's avoid that. */
+ .title { margin: 0 0 0 0 !important; }

* multipost-pages
  :PROPERTIES:
  :CUSTOM_ID:  multipost-pages
  :END:

# The =org-static-blog-with-find-file= macro does a lot of ‚Äòin your face‚Äô writing,
# which really ought to be hidden from sight.

#+begin_src emacs-lisp
(defvar octoicon:tag
"@@html:<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15 16\" width=\"15\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M7.73 1.73C7.26 1.26 6.62 1 5.96 1H3.5C2.13 1 1 2.13 1 3.5v2.47c0 .66.27 1.3.73 1.77l6.06 6.06c.39.39 1.02.39 1.41 0l4.59-4.59a.996.996 0 000-1.41L7.73 1.73zM2.38 7.09c-.31-.3-.47-.7-.47-1.13V3.5c0-.88.72-1.59 1.59-1.59h2.47c.42 0 .83.16 1.13.47l6.14 6.13-4.73 4.73-6.13-6.15zM3.01 3h2v2H3V3h.01z\"></path></svg>@@"

"See:
https://alhassy.github.io/org-special-block-extras/README.html#Link-Here-OctoIcons")

(defvar octoicon:clock
"@@html:<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14 16\" width=\"14\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M8 8h3v2H7c-.55 0-1-.45-1-1V4h2v4zM7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 011.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7z\"></path></svg>@@")
#+end_src

#+begin_src emacs-lisp
;; MA: Let's change how the index appears: I only want the abstracts.

(setq index-content-header
      (concat
 "Here are some of my latest thoughts..."
 " badge:Made_with|Lisp such as doc:thread-first and doc:loop (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"
 " tweet:https://alhassy.github.io/"))
#+end_src

#+begin_src emacs-lisp
(setq show-reading-time nil)

(defun org-static-blog-assemble-multipost-page (pub-filename post-filenames &optional front-matter)
  "Assemble a page that contains multiple posts one after another.
Posts are sorted in descending time."
  (setq post-filenames
        (sort post-filenames (lambda (x y)
                               (time-less-p (org-static-blog-get-date y)
                                            (org-static-blog-get-date x)))))

(with-temp-buffer
    (insert
     (concat
      "#+EXPORT_FILE_NAME: " pub-filename
      "\n#+options: toc:nil title:nil html-postamble:nil"
      "\n#+title: " (if (equal "index" (f-base pub-filename))
                        org-static-blog-publish-title
                        (f-base pub-filename))
      "\n#+begin_export html\n "
        org-static-blog-page-preamble
        org-static-blog-page-header
        (if front-matter front-matter "")
      "\n#+end_export"

      "\n\n"
      (if (equal "index" (f-base pub-filename))
          index-content-header
        "")

      "\n\n" ;; abstracts of posts
      (thread-last post-filenames
        (--map
         (format
          (concat
           ;; ‚ü®0‚ü© Title and link to article
           "#+HTML: <h2 class=\"title\"><a href=\"%s\"> %s</a></h2>"
           ;; ‚ü®1‚ü© Tags and reading time
           "\n#+begin_center\n%s\n%s\n#+end_center"
           ;; ‚ü®2‚ü© Article image
           "\n@@html:%s@@"
           ;; ‚ü®3‚ü© Preview
           "\n#+INCLUDE: \"%s::*Abstract\" :only-contents t"
           ;; ‚ü®4‚ü© ‚ÄúRead more‚Äù link
           "\n@@html:<p style=\"text-align:right\">@@"
           " badge:Read|more|green|%s|read-the-docs @@html:</p>@@")
          ;; ‚ü®0‚ü© Title and link to article
          (concat org-static-blog-publish-url (f-base it))
          (org-static-blog-get-title it)
          ;; ‚ü®1‚ü© Tags and reading time
          (concat octoicon:tag " "
                  (s-join " "
                          (--map (format "badge:|%s|grey|%stag-%s.html"
                                         (s-replace "-" "_" it)
                                         org-static-blog-publish-url it)
                                 (org-static-blog-get-tags it))))
          (if (not show-reading-time)
              ""
            (format "\n%s %s mins read"
                    octoicon:clock
                    (with-temp-buffer (insert-file-contents it)
                                      (org-ascii-export-as-ascii)
                                      (setq __x
                                            (count-words (point-min) (point-max)))
                                      (kill-buffer "*Org ASCII Export*")
                                      (delete-other-windows)
                                      (/ __x 200)))) ;; 200 words per minute reading
          ;; ‚ü®2‚ü© Article image
          (my/org-static-blog-assemble-image it)
          ;; ‚ü®3‚ü© Preview
          it
          ;; ‚ü®4‚ü© ‚ÄúRead more‚Äù link
          (concat org-static-blog-publish-url (f-base it))))
        (s-join "\n\n"))

      ;; bottom matter
      "\n#+begin_export html:\n"
      "<hr><hr> <div id=\"archive\">"
      "<a href=\""
      (org-static-blog-get-absolute-url org-static-blog-archive-file)
      "\">" (org-static-blog-gettext 'other-posts) "</a>"
      "</div>"
      "</div>"
      "<div id=\"postamble\" class=\"status\">"
      org-static-blog-page-postamble
      "</div>"
      "\n#+end_export"))
    (org-mode)
    (org-html-export-to-html)))

;; The existing org-static-blog-assemble-index is really fast,
;; since it just dumps articles wholesale into the landing page; not ideal.
;; I'd rather have a ‚Äòpreview‚Äô of articles.
#+end_src

* COMMENT The Landing Page :posterity:
  :PROPERTIES:
  :CUSTOM_ID: The-Landing-Page
  :END:

#+begin_src emacs-lisp

(defun org-static-blog-assemble-index ()
  "Assemble the blog index page.
The index page contains the last `org-static-blog-index-length`
posts as full text posts."
  (let ((post-filenames (org-static-blog-get-post-filenames)))
    ;; reverse-sort, so that the later `last` will grab the newest posts

(when nil
 (org-static-blog-with-find-file
  (concat org-static-blog-publish-directory org-static-blog-index-file)
    "HOLA"))

(with-temp-buffer
    (insert
     (format
      (concat
    "#+EXPORT_FILE_NAME: %s"
    "\n#+options: toc:nil title:nil html-postamble:nil"
    "\n#+title: %s"
    "\n#+begin_export html\n %s\n#+end_export"
    "\n#+HTML_HEAD: <link href=\"org-notes-style.css\" rel=\"stylesheet\" type=\"text/css\" />"
    "\n\n Here are some of my latest thoughts... or see the %s or %s... badge:here|there ... doc:thread-first"
    "\n\n %s"
    "\n\n#+HTML: %s"
    )
    (concat org-static-blog-publish-directory org-static-blog-index-file)
    org-static-blog-publish-title
    org-static-blog-page-preamble
    ;; org-static-blog-page-header

    ;; archives
    (concat "@@html: <a href=\"" (org-static-blog-get-absolute-url
    org-static-blog-archive-file) "\">archives</a> @@")

    ;; tags
    (concat "@@html: <a href=\"" (org-static-blog-get-absolute-url
    org-static-blog-tags-file) "\">tags</a> @@")

    ;; abstracts of posts
    (s-join "\n\n"(--map (format "#+HTML: <h2 class=\"title\"><a href=\"%s\"> %s</a></h2>\n#+begin_center\n%s\n%s\n#+end_center\n @@html:%s@@\n#+INCLUDE: \"%s::*Abstract\" :only-contents t\n@@html:<p style=\"text-align:right\">@@ badge:Read|more|green|%s|read-the-docs @@html:</p>@@"
                                 (concat org-static-blog-publish-url (f-base it))
                                 (f-base it)
                                 ;; https://alhassy.github.io/org-special-block-extras/README.html#Link-Here-OctoIcons
                            (concat "@@html:<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15 16\" width=\"15\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M7.73 1.73C7.26 1.26 6.62 1 5.96 1H3.5C2.13 1 1 2.13 1 3.5v2.47c0 .66.27 1.3.73 1.77l6.06 6.06c.39.39 1.02.39 1.41 0l4.59-4.59a.996.996 0 000-1.41L7.73 1.73zM2.38 7.09c-.31-.3-.47-.7-.47-1.13V3.5c0-.88.72-1.59 1.59-1.59h2.47c.42 0 .83.16 1.13.47l6.14 6.13-4.73 4.73-6.13-6.15zM3.01 3h2v2H3V3h.01z\"></path></svg>@@ "
                                 (s-join " "
                                 (--map (format "badge:%s||grey|%stag-%s.html" it
                                     org-static-blog-publish-url it)
                                   (org-static-blog-get-tags it))))

                            (format
"\n@@html:<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14 16\" width=\"14\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M8 8h3v2H7c-.55 0-1-.45-1-1V4h2v4zM7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 011.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7z\"></path></svg>@@
                             %s mins read"
                            (with-temp-buffer (insert-file-contents it)
                                              (org-ascii-export-as-ascii)
                                        (setq _x (count-words (point-min) (point-max)))
                                        (kill-buffer "*Org ASCII Export*")
                                        (delete-other-windows)
                                        (/ _x 200))) ;; 200 words per minute reading

                                 (my/org-static-blog-assemble-image it)
                                 it
                                 (concat org-static-blog-publish-url (f-base it)))
                         post-filenames))

    ;; bottom matter
    (s-replace "\n" "" (concat    "<hr><hr> <div id=\"archive\">"
    "<a href=\"" (org-static-blog-get-absolute-url org-static-blog-archive-file) "\">" (org-static-blog-gettext 'other-posts) "</a>"
    "</div>"
    "</div>"
    "<div id=\"postamble\" class=\"status\">"
    org-static-blog-page-postamble
    "</div>")

    )))
    (org-mode)
    (org-html-export-to-html)
      ))
  )
#+end_src

#+RESULTS:
: org-static-blog-assemble-index

* No eval upon export
  :PROPERTIES:
  :CUSTOM_ID: No-eval-upon-export
  :END:
#+BEGIN_SRC emacs-lisp
;; No code execution on export
(setq org-export-use-babel nil)
#+END_SRC
* Publishing with =[C-u C-u] C-c C-b=
  :PROPERTIES:
  :CUSTOM_ID: Publishing-with-C-u-C-u-C-c-C-b
  :END:
#+begin_src emacs-lisp
;; No lock files, for now
;; The ‚Äú.#file‚Äù files
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Interlocking.html#Interlocking
(setq create-lockfiles nil)

;; Override all minor modes that use this binding.
(bind-key* (kbd "C-c C-b")
  (lambda (&optional prefix)
"C-c C-b        ‚áí Publish current buffer
C-u C-c C-b     ‚áí Publish entire blog
C-u C-u C-c C-b ‚áí Publish entire blog; re-rendering all blog posts"
     (interactive "P")
     (pcase (or (car prefix) 0)
       (0  (org-static-blog-publish-file (f-full (buffer-name))))
           ;; (browse-url-of-file (format "%s%s.html" org-static-blog-posts-directory
           ;;                            (f-base (buffer-name))))
       ;; Apparently I have to publish the current buffer before trying
       ;; to publish the blog; otherwise I got some errors.
       (4  (org-static-blog-publish-file (f-full (buffer-name)))
           (org-static-blog-publish)))))
       ;; (16 (org-static-blog-publish-file (f-full (buffer-name)))
       ;;    (org-static-blog-publish t))
#+end_src

* COMMENT todo
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-todo
  :END:

change the multipost method to behave like the way I have it for index.html;
e.g., for tags, showing a full post is unreasonable ---my posts are long.

+ in the index, under each article's name:
  - date and badge tags ^_^
    - org-static-blog-get-date
  - reading length ;-)
  - twitter link ;-)
    - per article via advice

** COMMENT setup
   :PROPERTIES:
   :ID:       1D57CE5A-3349-48B2-A63F-23DBB0AFF1B6
   :PUBDATE:  <2020-04-26 Sun 05:16>
   :CUSTOM_ID: Post-2-Setup
   :END:

 #+begin_src shell
cd ~/Learning; mkdir public_html
 #+end_src

 #+RESULTS:

 #+begin_src shell
cd ~/Learning; mkdir drafts
 #+end_src

 #+RESULTS:

 Then,

 #+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("blog"
         :base-directory "~//"
         :html-extension "html"
         :with-tags t
         :base-extension "org"
         :publishing-directory "~//public_html/"
         :publishing-function (org-html-publish-to-html)
         :html-preamble
         ;;  https://taopeng.me/org-notes-style/
"<link href=\"https://alhassy.github.io/next-700-module-systems/prototype/org-notes-style.css\" rel=\"stylesheet\" type=\"text/css\" />
"
:html-postamble
         (lambda (info)
           "Do not show disqus for Archive and Recent Posts"
           (cond ((string= (car (plist-get info :title)) "Archive") "")
                 ((string= (car (plist-get info :title)) "Recent Posts")
                  "<div id=\"archive\"><a href=\"archive.html\">Other posts</a></div>")
                 (t
             "<div id=\"archive\"><a href=\"archive.html\">Other posts</a></div>
              <div id=\"disqus_thread\"></div>
              <script type=\"text/javascript\">
              /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
              var disqus_shortname = 'life-and-computing-science';
              /* * * DON'T EDIT BELOW THIS LINE * * */
              (function() {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                  })();
              </script>
              <noscript>Please enable JavaScript to view the
                  <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>
              <a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>")))
         :html-head-extra
         "<link rel=\"alternate\" type=\"application/rss+xml\"
                href=\"https://alhassy.github.io//public_html/my-blog.xml\"
                title=\"RSS feed for my learning.org\">
<a href=\"archive.html\">Other posts</a>"
         :auto-sitemap t
         :sitemap-filename "archive.org"
         :sitemap-title "Archive"
         :sitemap-sort-files anti-chronologically
         :sitemap-style list
         :sitemap-format-entry
         (lambda (entry style project)

; (org-publish-find-property FILE PROPERTY PROJECT &optional BACKEND)
; Find the PROPERTY of FILE in project.

(format "[[file:%s][%s]]%s%s"
         entry
         (org-publish-find-title entry project)
        (if (org-publish-find-property entry :date project)
          (format "\n\n%s\n" (org-publish-find-property entry :date project))
          "")
         (if (equal "theindex.org" entry)
             ""
              (format "\n#+begin_quote\n\n#+include: %s::*Abstract :only-contents t\n#+end_quote" entry))))

         :makeindex nil)))

(require 'ox-rss)

(add-to-list 'org-publish-project-alist
             '("blog-rss"
           :base-directory  "~//"
           :base-extension "org"
           :publishing-directory  "~//public_html/"
           :publishing-function (org-rss-publish-to-rss)
           :html-link-home "https://alhassy.github.io//public_html/"
           :html-link-use-abs-url t
           :exclude ".*"
           :include ("my-blog.org")))
 #+end_src

 #+RESULTS:
 | blog-rss        | :base-directory                                                                                                                                                                                                                                                                                                 | ~// | :base-extension | org  | :publishing-directory | ~//public_html/ | :publishing-function | (org-rss-publish-to-rss) | :html-link-home       | https://alhassy.github.io//public_html/ | :html-link-use-abs-url | t                          | :exclude       | .*                                                                                                                               | :include | (my-blog.org) |
 | blog            | :base-directory                                                                                                                                                                                                                                                                                                 | ~// | :html-extension | html | :with-tags            | t               | :base-extension      | org                      | :publishing-directory | ~//public_html/                         | :publishing-function   | (org-html-publish-to-html) | :html-preamble | <link href="https://alhassy.github.io/next-700-module-systems/prototype/org-notes-style.css" rel="stylesheet" type="text/css" /> |          |               |
 | :html-postamble | (lambda (info) Do not show disqus for Archive and Recent Posts (cond ((string= (car (plist-get info :title)) Archive) ) ((string= (car (plist-get info :title)) Recent Posts) <div id="archive"><a href="archive.html">Other posts</a></div>) (t <div id="archive"><a href="archive.html">Other posts</a></div> |     |                 |      |                       |                 |                      |                          |                       |                                         |                        |                            |                |                                                                                                                                  |          |               |

** COMMENT Etc                                                       :ignore:
   :PROPERTIES:
   :CUSTOM_ID: Etc
   :ID:       C4F83BA5-FA4C-4953-9965-E4EE015D87EA
   :PUBDATE:  <2020-04-26 Sun 06:35>
   :END:

 #+begin_export html
 <footer class="container">
     <div class="site-footer">

         <div class="copyright pull-left">
             Powered by
             <a href="https://github.com/alhassy/emacs.d">Emacs</a>
         </div>

         <a href="https://github.com/alhassy" target="_blank" aria-label="view source code">
             octicon-github
         </a>

         <div class="pull-right">
             <a href="javascript:window.scrollTo(0,0)" >TOP</a>
         </div>
     </div>
 </footer>
 #+end_export
** Ideas
   :PROPERTIES:
   :CUSTOM_ID: Ideas
   :END:

 + Footer should include
   - See Org Source; see HTML source
   - buy-me-a-coffee

#+html: <hr>
#+begin_center
badge:author|musa_al-hassy|purple|https://alhassy.github.io/|nintendo-3ds
badge:|buy_me_a¬†coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee
#+end_center

* The name: [[https://en.wikipedia.org/wiki/Basmala][al-bas-mala]]
  :PROPERTIES:
  :CUSTOM_ID:  the-name
  :END:

The prefix /al/ is the Arabic definite particle which may correspond to English's /the/;
whereas /basmala/ refers to a beginning.

That is, this is a variation on the traditional [[https://en.wikipedia.org/wiki/%22Hello,_World!%22_program]["hello world"]] ;-)

* COMMENT Old Jekyll Setup :posterity:terrible:
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Old-Jekyll-Setup
  :END:
Write in Org-mode and generate coloured markdown for Jekyll usage

# Usage ‚à∑ Begin blog server then load AlBasmala, then edit & preview.
#
# (shell-command "cd ~/alhassy.github.io/ ; bundle exec jekyll serve &")
# (find-file "~/alhassy.github.io/content/AlBasmala.el")
# (preview-article :browser t)
# (preview-article)

** Server Setup
   :PROPERTIES:
   :CUSTOM_ID: Server-Setup
   :END:

 When drafting, it's ideal to be able to inspect the resulting web article.
 To do so, we may initialise the Jekyll server as follows.
 #+begin_src emacs-lisp :tangle no
(shell-command "cd ~/alhassy.github.io/ ; bundle exec jekyll serve &")
 #+end_src

 In order to be an Org only interface, let's remove this shell invocation from
 the user's view --as an Org user, they need not be forced to learn such Jekyll intricacies.

 #+begin_src emacs-lisp
(defvar jekyll-served nil "Documents whether the blog server has begun.")

(defun ensure-blog-is-serving ()
  "Ensure that the server has begun."
   (unless jekyll-served
      (shell-command "cd ~/alhassy.github.io/ ; bundle exec jekyll serve &")
      (setq jekyll-served t)))
 #+end_src

 Super simple, but hides an annoying step & layer from the user.

** ~file~ Symbols
   :PROPERTIES:
   :CUSTOM_ID: file-Symbols
   :END:

 We will look at various generated files revolving around the given file,
 so let us generate the necessary variables that refer to such names.

 First off, some useful libraries.
 #+BEGIN_SRC emacs-lisp
(require 'dash) ;; A modern list library for Emacs
(require 's)    ;; String processing library.
 #+END_SRC

 Now, let's make a function that produces our variables.
 This way we avoid tedious repetition of a particular pattern.
 #+BEGIN_SRC emacs-lisp
(cl-defun make-file-extension-variables (&key prefix name extensions)
  " Produce symbols ‚Äòprefix.ext‚Äô whose value is the string ‚Äòname.ext‚Äô, where
    ‚Äòext‚Äô range over the list ‚Äòextensions‚Äô.

    Both ‚Äòprefix‚Äô and ‚Äòname‚Äô should be strings.

    I insist that the arguments be keywords, ‚Äú:prefix, :name, :extensions‚Äù,
    since I currently feel that this is more informative.
    All three pieces need to be there, otherwise no variables are formed.
    Success is signalled by the message string ‚Äùnew filename variables created‚Äù.

    Moreover, these symbols are local to the current buffer;
    in-particular, their values cannot be altered from other buffers.
  "
  (and prefix name
    (dolist (ext extensions (message "new filename variables created"))
      (let* ((name.ext (concat name "." ext))
         (symbol   (intern (concat prefix "." ext))))
       (set symbol name.ext)
       ;; (make-local-variable symbol)
       ;; Undesirable since I want to use these names in other buffers.
      ))))
 #+END_SRC

 :Example_of_locals_in_elisp:
 #+BEGIN_SRC emacs-lisp :tangle no
(setq bar "noah")          ;; All buffers can access this variable, with only this value as default value.
(make-local-variable 'bar) ;; All future setq's only affect this buffer.
(setq bar "rab")

;; As such, the following approach makes a variable local to begin with.

(make-local-variable 'foo) ;;
(setq foo "woah")
 #+END_SRC
 :End:

 With that in hand, let's actually make the ~file.*~ variables.
 #+BEGIN_SRC emacs-lisp
(setq AbsNAME (file-name-sans-extension buffer-file-name))
(setq NAME (file-name-sans-extension (buffer-name)))

(make-file-extension-variables
   :prefix     "file"
   :name       NAME
   :extensions '("org" "el" "src" "tex" "pdf" "html"))
 #+END_SRC

 Finally, it would be nice to know where the blog repository lives.
 #+BEGIN_SRC emacs-lisp
(defvar blogrepo "~/alhassy.github.io/"
    "The path to the blog repository on a local machine.")

(defvar blogrepo-posts "~/alhassy.github.io/_posts/"
    "The path to the blog repository's posts directory.")

(defvar blogrepo-file.pdf (concat "../assets/pdfs/" file.pdf) ;; (concat "~/alhassy.github.io/assets/pdfs/" file.pdf)
  "The path to the blog repository where the generated PDF should live.")

;; Make these variables local to the current buffer.
;; Undesirable since I'd like to utlise these in other buffers.
;; (make-local-variable 'blogrepo)
;; (make-local-variable 'blogrepo-posts)
;; (make-local-variable 'blogrepo-file.pdf)
 #+END_SRC

 Before we close we need Jekyll relevant names.
 #+begin_src emacs-lisp
(defvar jekyll.name nil
  "The formal name of the resulting Jekyll blog article.")

(defvar jekyll.name.md nil
  "The formal markdown of the resulting Jekyll blog article.")
 #+end_src

** Get Org Keywords
   :PROPERTIES:
   :CUSTOM_ID: Get-Org-Keywords
   :END:

 We want to be able to access ~#+key: value~ pairs from the article org source
 as a variable ~org.key~. We also allow as input default values, since the user
 may not have provided values for them.

 #+begin_src emacs-lisp
(defvar albasmala/keywords
 `(("title"       . nil)
   ("date"        . ,(format-time-string "%Y-%m-%d"))
   ("author"      . nil)
   ("image"       . nil)
   ("imageheight" . 142)
   ("imagewidth"  . 142)
   ("categories"  . nil)
   ("sourcefile"  .
    ,(concat "https://raw.githubusercontent.com/alhassy/alhassy.github.io/master/content/"
        (buffer-name)))
   ("nopdf"              . nil)
   ("nomodificationdate" . nil)
   ("draft"              . nil))
 "This list contains tuples denoting a ‚Äòproperty‚Äô and it's ‚Äòdefault‚Äô value.
  These are the keywords that the user of this AlBasmala setup should utilise.

  For example, if the user does not provide a ‚Äòdate‚Äô, then one is provided,
  for them; the default date.

  Note that ‚Äòsourcefile‚Äô refers to the URL to the raw master location of the blog
  repository by default, but it's useful for the user to set it when the file is
  associated with a different repoistory. The URL should begin ‚Äòhttps://‚ãØ‚Äô.

  By default we produce a PDF and link to it from the article.
  If ‚Äònopdf‚Äô is set to a non-nil value, then no PDF is generated
  --which may be usefull since making a pdf takes time, which may not be desirable
  while drafting. Likewise, we always produce the most recent modification date,
  unless instructed otherwise. --c.f., ‚Äòdraft‚Äô.

  The ‚Äòdraft‚Äô variable is useful since it puts the word DRAFT alongside
  a generated number when drafting so as to ensure you're actually
  re-generating the article --rather than loading a previously generated one.
  When drafting, no PDF is generated.

  Warning: The values cannot have links; e.g., embedding a link in the
  value of ‚Äòauthor‚Äô renders this script useless.
 ")
 #+end_src

 For each keyword, let's uniformly produce these symbols, attempt to obtain their values,
 and use the defaults otherwise.

 #+begin_src emacs-lisp
(defun make-org-variables (keywords)
  "For each ‚Äú(key . default)‚Äù in the ‚Äòkeywords‚Äô list, we produce a symbol named
  ‚Äòorg.key‚Äô whose value is set to be the value from ‚Äú#+key: value‚Äù
  from the current buffer.

  The keys may be in lower case; we upcase them before obtaining
  their values. If there is no value, we use the defaults in ‚Äòkeywords‚Äô.
  "

  (dolist (keydef keywords (message "new org keyword variables created"))
    (let* ((key (car keydef))
       (value (org-keyword (upcase key)))
       (org.key (concat "org." key))
       (symbol  (intern org.key)))

       (set symbol value)
       (unless value (set symbol (cdr keydef)))
       (put symbol 'variable-documentation
        "Variable generated by ‚Äòmake-org-variables‚Äô")

       ;; (make-local-variable symbol)
       ;; Undesirable since I use the ‚Äòorg.key‚Äô symbols
       ;; in the assocaited html buffers.
      )))
 #+end_src

 :Setting_docstrings_after_the_fact:

 (put FUNCTIONSYMBOL 'function-documentation VALUE)

 (get 'org.sourcefile 'variable-documentation)
 (put 'org.sourcefile 'variable-documentation "nice")

 (get symbol 'variable-documentation)
 (put 'symbol 'variable-documentation 'doc-string)
 :End:

 We know turn to actually obtaining the values of keywords as a function call.
 Why not just set them once? These values can be altered any time by the user, e.g., me,
 and as such they need to be reloaded before the post is created as a precautionary measure.
 E.g., the title in the org file and the title in the article may be distinct, so we allow
       the user this added flexibility.

 We invoke ~make-org-variables~ to produce variables of the form ~org.var~.

 #+BEGIN_SRC emacs-lisp
(defun GetOrgKeyWords () "Get the #+KEYWORD values from the org-file."

   (make-org-variables albasmala/keywords)

   ;; We have these here in-case the ‚Äúorg.date‚Äù is altered.
   (setq jekyll.name   (concat org.date "-" NAME))
   (setq jekyll.name.md (concat org.date "-" NAME ".markdown"))
)

;; Globally set the variables
;; (GetOrgKeyWords)
 #+END_SRC

 Note that these values can be manually overridden by including in your locals, for example:
 #+BEGIN_SRC emacs-lisp :tangle no
# eval: (setq org.title "Experimenting..." )
 #+END_SRC

** MakeHeader
   :PROPERTIES:
   :CUSTOM_ID: MakeHeader
   :END:

 The Jekyll backend has a particular header for articles, which we produce:

 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(defun MakeHeader () "Header for Jekyll backend."
  (setq HEADER (concat
   "---\nlayout: post\nname: " jekyll.name
   "\ntitle: "			org.title
   "\ndate: "			org.date
   "\nauthor: "			org.author
   "\nimage:\n   href: "	org.image
   "\ncategories: "		org.categories
   "\n---\n"
   )))
 #+END_SRC

** Article Image
   :PROPERTIES:
   :CUSTOM_ID: Article-Image
   :END:

 An image is included via the ~#+IMAGE:location~ --see the usages sections below.
 Alternative methods include.

 + An image can be embedded as a url, in Org-mode:
    #+BEGIN_SRC org :tangle no
,#+begin_export html
<center> <img src="http://book.realworldhaskell.org/support/rwh-200.jpg"
  alt="RWH Cover" width="142" height="142" align="top"> </center>
,#+end_export
 #+END_SRC

   :One_long_line:
    #+BEGIN_SRC org :tangle no
,#+HTML: <center> <img src="http://book.realworldhaskell.org/support/rwh-200.jpg" alt="RWH Cover" width="142" height="142" align="top"> </center>
 #+END_SRC
 :End:
 + Or as an Org link:
    #+BEGIN_SRC org :tangle no
[[file:../assets/img/rwh-200.jpg]]
 #+END_SRC

 + Or as local image via explicit html link:
    #+BEGIN_SRC org :tangle no
,#+begin_export html
<center> <img src="../assets/img/rwh-200.jpg" alt="RWH Cover"
width="142" height="142" align="top"> </center>
,#+end_export
 #+END_SRC

   :One_long_line:
    #+BEGIN_SRC org :tangle no
,#+HTML: <center> <img src="../assets/img/rwh-200.jpg" alt="RWH Cover" width="142" height="142" align="top"> </center>
 #+END_SRC
 :End:

 For now, I use the approach of inserting an HTML URL:
 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(defun insert-image-and-other-formats ()
   "Insert image location obtained from #+IMAGE org keyword, as well as top-matter."

   (let ((html.image.info
       (concat "<center> <img src=\"" org.image
         "\" alt=\"Musa's article image\""
         " width=\"" (format "%s" org.imagewidth) "\" "
         "height=\"" (format "%s" org.imageheight) "\" "
         "align=\"top\"> </center>")))

   (re-replace-in-file ;; see below
      (concat AbsNAME ".html")
      "<h1.*h1>"
      (lambda (x) (concat x "\n" html.image.info "\n" (make-top-matter))))))
 #+END_SRC

 One possible extension would be to make parameters for image width and height.
 Perhaps I will get to doing so in time.

 Disclaimer: I wrote the following /before/ I learned any lisp; everything below is
 probably terrible.
 #+BEGIN_SRC emacs-lisp
(defun re-replace-in-file (file regex whatDo)
   "Find and replace a regular expression in-place in a file.

   Terrible function ‚Ä¶ before I took the time to learn any Elisp!
   "
    (find-file file)
    (goto-char 0)
    (let ((altered (replace-regexp-in-string regex whatDo (buffer-string))))
      (erase-buffer)
      (insert altered)
      (save-buffer)
      (kill-buffer)))
 #+END_SRC

 Example usage:
 #+BEGIN_EXAMPLE emacs-lisp
;; Within mysite.html we rewrite: <h1.*h1>   ‚Ü¶   <h1.*h1>\n NICE
;; I.e., we add a line break after the first heading and a new word, ‚ÄúNICE‚Äù.
(re-replace-in-file "mysite.html"
                    "<h1.*h1>"
                    (lambda (x) (concat x "\n NICE")))
 #+END_EXAMPLE
** PDF Generation
   :PROPERTIES:
   :CUSTOM_ID: PDF-Generation
   :END:

 :Old_tangle_latex_approach:
 The org block header for the following has
 #+begin_src org :tangle no
:var webArticle = (file-name-sans-extension (buffer-name))
 #+end_src
 This allows us to use the buffer's name within the tangled LaTeX! Neato.
 #+NAME: headers
 BEGIN_SRC org :tangle headers.ltx :exports code :var webArticle = (file-name-sans-extension (buffer-name))

 END_SRC
 That is, the string ~webArticle~ is a parameter of this source block.

 Later,
   ;; Replace webArticle with the name of the article in our headers.ltx file.
   (re-replace-in-file "~/alhassy.github.io/content/headers.ltx" "webArticle" (lambda (x) NAME))
 :End:

 Finally, we weave everything together:
 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
;; Include LaTeX Org-calls, produce the PDF, then revert the file.
;;
(defun prepend-for-simple-latex (&rest extras)
  "Prepend an Org file with a simple LaTeX preamble; perform extras before returing to source file.
  "
  (save-buffer)
  (copy-file file.org file.src 'overwrite)  ;; Produce a checkpoint.
  (beginning-of-buffer)

  (insert (s-join "\n" `(
    "#+OPTIONS: toc:nil"
    "#+LATEX_HEADER: \\usepackage[margin=0.5in]{geometry}"
    "#+LATEX_HEADER: \\usepackage{fancyhdr}"
    "#+LATEX_HEADER: \\setlength{\\headheight}{30pt}"
    "#+LATEX_HEADER: \\lhead{} \\rhead{} \\cfoot{\\vspace{-3em} \\thepage} \\lfoot{} \\rfoot{}"
    "#+LATEX_HEADER: \\chead{\\emph{This PDF was generated \\emph{ungracefully} from a web article on"
    ,(concat "#+LATEX_HEADER: \\url{https://alhassy.github.io/" NAME "/}}}")
    "#+LATEX_HEADER: \\let\\doit=\\maketitle"
    "#+LATEX_HEADER: \\def\\maketitle{\\doit\\thispagestyle{fancy}}"
    "#+LATEX: \\pagestyle{fancy} \\tableofcontents \\newpage"
    "#+LATEX_HEADER: \\usepackage{color}"
    "#+LATEX_HEADER: \\definecolor{darkgreen}{rgb}{0.0, 0.3, 0.1}"
    "#+LATEX_HEADER: \\definecolor{darkblue}{rgb}{0.0, 0.1, 0.3}"
    "#+LATEX_HEADER: \\hypersetup{colorlinks,linkcolor=darkblue,citecolor=darkblue,urlcolor=darkgreen}"
    "\n"
      )))

  ;; Using (lambda () (extras...)) makes the extras happen before the reversion below.
  (eval extras)

  ;; revert to working file
  (copy-file file.src file.org 'overwrite)
  (delete-file file.src)
  (toggle enable-local-variables :all
    (revert-buffer 'ignore-auto 'no-confirmation))

  ;; A copy, rather a move, since article repo may differ from blog repo.
  (copy-file file.pdf

         ;; ‚Äòblogrepo-file.pdf‚Äô is the path relative to the blog repository;
         ;; this format allows us to view the PDF when the local blog server is running.
         ;; However, we may currently be residing in a different repository.
         ;; As such, we shift the cp command to move to the absolute path to the blog repo.
         (concat "~/alhassy.github.io" (s-chop-prefix ".." blogrepo-file.pdf))
         ;; (file-truename blogrepo-file.pdf) ;; fix me

         'overwrite
    )
)

(defun my-org-latex-export-to-pdf ()
  "Produce a simple PDF that has wide margins and has a warning"
  (prepend-for-simple-latex (lambda () (org-latex-export-to-pdf)))
)

 #+END_SRC

** Other Formats
   :PROPERTIES:
   :CUSTOM_ID: Other-Formats
   :END:

 Readers of the article may want to see the source
 --which may contain code or parts not rendered in the article, such as exercise solutions.
 # --
 # or they may prefer a PDF version for printing or simply for an alternate aesthetic.

 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(defun get-raw-and-commits (url)
  "
  Given a github ‚Äòurl‚Äô, return the associated commits history and raw textual urls,
  as a dotted pair.

  For example,
  url     ‚Üí https://github.com/‚ü™user‚ü´/‚ü™project‚ü´/blob/master/content/‚ü™filepath‚ü´
  raw     ‚Üí https://raw.githubusercontent.com/‚ü™user‚ü´/‚ü™project‚ü´/master/content/‚ü™filepath‚ü´
  commits ‚Üí https://github.com/‚ü™user‚ü´/‚ü™project‚ü´/commits/master/content/‚ü™filepath‚ü´
  "

  (let* ((github  "https://github.com/")
     (comm  (s-split "/" (s-chop-prefix github url)))
       )

      (setf (nth 2 comm) "commits")

      ;; raw, then commits
      `(
       , (s-prepend "https://raw.githubusercontent.com/"
         (s-replace "/blob/" "/" (s-chop-prefix github url)))
       .
       ,(s-prepend github (s-join "/" comm))
       )
  )
)
 #+END_SRC

 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(defun make-html-link (url identifier)
  "Yield HTML string code for a link to ‚Äòurl‚Äô presented as ‚Äòidentifier‚Äô;
   if ‚Äòurl‚Äô is non-nil; otherwise, yield only the text ‚Äòidentifier‚Äô.
  "
  ;; (message-box url)
  (if url
      (concat "<a href=\"" url "\" target=\"_self\">" identifier "</a>")
      identifier
  )
)
 #+END_SRC

 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(defun make-top-matter ()
  "This is the top-most text that appears right after the article's
   title. It includes viewing the source, a PDF rendition, and
   the most recent date of modification --unless the variables are nil.
  "
  (let* ((date (format-time-string "%Y-%m-%d"))
     (content "")
     (rawsrc  (car (get-raw-and-commits org.sourcefile)))
     (commits (cdr (get-raw-and-commits org.sourcefile)))
    )

     ;; Perform the loop over tuples (constraint url description).
     (dolist (var `( (,org.nopdf ,blogrepo-file.pdf  "Read as PDF"   )
             (,org.nopdf nil                 " or "          )
             (nil ,rawsrc                    "See the source")
             (,org.nomodificationdate nil
                ,(concat " ; " (unless org.nopdf "<br>")))
             (,org.nomodificationdate ,commits "Last modified")
             (,org.nomodificationdate nil ,(concat " on " date))
           )
          content)
      ;; Unless there are constraints, concatenate the resulting html.
      (unless (car var) (setq content (concat content (make-html-link (cadr var) (caddr var)))))
     )

     ;; for debugging / drafting,
     (concat
       (when org.draft (format "<center> Draft: %s </center>" (gensym)))
       "<small> <center> ‚ü® " content " ‚ü© </center> </small>")
  )
)
;; Rather than <small>, maybe utilise <font size="3">.
 #+END_SRC

*** COMMENT org-html-postamble-format at the end of the webpage :old_approach:
    :PROPERTIES:
    :CUSTOM_ID: COMMENT-org-html-postamble-format-at-the-end-of-the-webpage
    :END:

 # Look at the super short doc to know how to manipulate this variable: (describe-symbol 'org-html-postamble-format)
 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(setq org-html-postamble-format
  (let* ((nomorg (buffer-name))
     (nom    (file-name-sans-extension nomorg))
     (src    (make-html-link (concat "../content/" nomorg) "Org Source"))
     (nompdf (concat blogrepo "/assets/pdfs/" nom ".pdf"))
     (pdf    (make-html-link nompdf "View me as a PDF"))
    )
`(("en" ,(concat "<hr> <center> Last modified on %C ; " pdf " or see the " src " ; Contact me at %e </center>"))))
)
 #+END_SRC

 To avoid having a postamble altogether we could include
 #+BEGIN_SRC org
,#+OPTIONS: html-postamble:nil
 #+END_SRC

** ~preview-article~ -- the heart of ~AlBasmala.el~
   :PROPERTIES:
   :CUSTOM_ID: preview-article-the-heart-of-AlBasmala-el
   :END:

 We make the article in stages:
  0. Go to the Org source and use the native Org utitlies to produce a coloured html file.
  1. Insert the article image into that html file.
     - We do so *before* producing the Jekyll markdown variant so that we can preview it correctly.
  2. Remove some clutter from the html, yielding a markdown file.
  3. Prepend the Jekyll header created using the keywords.
  4. Move the markdown file to the ~_posts~ directory and show the html file in a browser.

 :Nope:
 We use ~toggle~, a personal function from my ~init~,
 that toggles a variables value till the end of its form.
 We use it below to disable all [[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html][Emacs buffer local variables]], do some work,
 then re-enable them afterwards. Such variables generally require a query
 since they could be dangerous, like erasing the disk, so we disable them temporarily.
 :End:

 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(local-set-key (kbd "<f7>") 'preview-article)

  (cl-defun preview-article (&key (browser nil) (draft nil))
    "Create and preview a the html form of the content.

    A non-nil value for ‚Äúorg.nopdf‚Äù short-circuits the generation of a PDF,
    thereby yielding a possibly faster execution.

    A non-nil value for ‚Äú:browser‚Äù opens the article using the default browser.
    This may be undesirable, since it may open many tabs in your brower.

    The ‚Äòdraft‚Äô keyword option is here in case we want to override
    whatever the local ‚Äò#+DRAFT‚Äô value may be.
    "

    (interactive)
    (save-buffer)

    (ensure-blog-is-serving)

    ;; Remove any existing html, in case we fail to generate it
    ;; we do not want to render an out of date version.
    (shell-command (concat "rm ~/alhassy.github.io/_posts/" jekyll.name.md))

    (setq enable-local-variables nil)
    (setq enable-local-eval nil)

    ;; compile coloured html
    (find-file file.org)
    (GetOrgKeyWords)
    (when draft (setq org.draft draft))
    (org-html-export-to-html)

    ;; Insert image, duh.
    (insert-image-and-other-formats)

    ;; Discard first 3 lines, (note the 1-indexing), since they don't look very nice
    ;; in the resulting markdown file when rendered on the Jekyll site.
    (shell-command (concat "tail -n +4 <" file.html " >" jekyll.name.md))

    ;; Preprend file with a header.
    (find-file jekyll.name.md)
    (beginning-of-buffer)
    (MakeHeader)
    (insert HEADER)
    (save-buffer)
    (kill-buffer jekyll.name.md)

    ;; Move it to posts directory.
    (shell-command (concat "mv " jekyll.name.md " " blogrepo-posts))

    ;; ;; Uncomment for debugging.
    ;; ;; (find-file (concat "~/alhassy.github.io/_posts/" jekyll.name.md))

    ;; no pdf generation in draft mode
    (unless (or org.draft org.nopdf) (my-org-latex-export-to-pdf))

    ;; Preview locally in browser.
    (when browser
      (let* ((buf (concat "*AlBasmala*" NAME "*")))

        (toggle kill-buffer-query-functions nil (ignore-errors (kill-buffer buf)))
        (async-shell-command (concat "open http://localhost:4000/" NAME "/") buf)
      )
    )

    (message "Article has been opened in your browser.")

    (setq enable-local-variables t)
    (setq enable-local-eval t)
  )
 #+END_SRC

** COMMENT Version control                     :Deprecated:Before_magit_time:
   :PROPERTIES:
   :CUSTOM_ID: COMMENT-Version-control
   :END:

   A simple version control mechanism; will likely switch to ~magit~ in the future.

  #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(global-set-key (kbd "<f8>") 'commit)

(defun commit () "Commit changes to git in the form: ‚ÄúChangedFile: CommitMessage‚Äù."
  (interactive)

  ;; In-case the article was updated but we forgot to produce new generated files.
  (preview-article)

  (shell-command "rm *.html")   ;; remove noise

  (let ((msg (read-string (format "Commit message for %s: " NAME))))
   ; (shell-command (format "git add    ../_posts/%s ../content/%s %s %s" jekyll.name.md file.org blogrepo-file.pdf file.el))
   ; (shell-command (format "git commit ../_posts/%s ../content/%s %s %s -m \"%s: %s\"" jekyll.name.md file.org blogrepo-file.pdf file.el NAME msg))

   ;; ‚Äúgit add commitables‚Äù
   (shell-command  (s-join " " (cons "git add" commitables)))

   ;; ‚Äúgit commit commitables -m NAME: message‚Äù
   ;; Note that the commit message needs to be in quotes.
   (shell-command  (s-join " " (append (cons "git commit" commitables) (list (format "-m \"%s: %s\"" NAME msg)))))
  )
)
  #+END_SRC

** Publish
   :PROPERTIES:
   :CUSTOM_ID: Publish
   :END:

 #+BEGIN_SRC emacs-lisp :tangle AlBasmala.el
(defun publish () "Send material to github pages."
  (interactive)

  (message (format "Publishing article: %s " NAME))

  (shell-command "rm *.html")   ;; remove noise

  (eshell)
  (with-current-buffer "*eshell*"
    (eshell-return-to-prompt)
    (insert (concat "cd ~/alhassy.github.io/_posts/"
            " ; "
            (format "git add %s %s" jekyll.name.md blogrepo-file.pdf))
            " ; "
            (format "git commit %s %s -m \"%s: %s\"" jekyll.name.md blogrepo-file.pdf NAME "Article updated.")
            " ; "
            "git push")
    (switch-to-buffer "*eshell*")
    (eshell-send-input)
  )
)
 #+END_SRC

 # Remember it takes 10 seconds for the live github page to actually change!

** Usage
   :PROPERTIES:
   :CUSTOM_ID: Usage
   :END:

 # Within src blocks containing org, you need to escape org heading, the `*`, delimiters with a comma.
 # E.g.: ,* My heading


 #+BEGIN_EXPORT html
 <table style="width:100%">
   <tr>
 #+END_EXPORT

 #+HTML: <td>
 The [[file:template.org][example]] source,
 #+HTML: <small>
 #+INCLUDE: "template.org" src org
 #+HTML: </small> </td>

 #+HTML:  <td> Results in, <br> <br> <br>
 #+BEGIN_EXPORT html
 <iframe src="../assets/demoing_template.html" style="width:100%" height="487">
     alternative content for browsers which do not support iframe.
 </iframe>
 #+END_EXPORT
 #+HTML:  </td>
 #+BEGIN_EXPORT html
   </tr>
 </table>
 #+END_EXPORT

 #+latex: In the LaTeX format, this content is not supported.


** footer
   :PROPERTIES:
   :CUSTOM_ID: footer
   :END:

 NOTE: It takes about 20secs ~ 1min for the changes to be live on github pages.

 (find-file "AlBasmala.el")

 # Local Variables:
 # eval: (setq NAME (file-name-sans-extension (buffer-name)))
 # eval: (org-babel-tangle)
 # eval: (load-file "AlBasmala.el")
 # compile-command: (progn (org-babel-tangle) (preview-article))
 # eval: (require 'ox-extra)
 # eval: (ox-extras-activate '(ignore-headlines))
 # org-latex-inputenc-alist: (("utf8" . "utf8x"))
 # eval: (setq org-latex-default-packages-alist (cons '("mathletters" "ucs" nil) org-latex-default-packages-alist))
 # End:
